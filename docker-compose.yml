version: '3.8'

services:
  chatbot-backend:
    build:
      context: .
      dockerfile: Dockerfile
      target: production
    container_name: rag-chatbot-backend
    ports:
      - "8000:8000"
    environment:
      # App Configuration
      - APP_NAME=Multi-Tenant RAG Chatbot
      - APP_VERSION=1.0.0
      - APP_ENV=production
      - DEBUG=false
      - HOST=0.0.0.0
      - PORT=8000
      
      # Database Configuration
      - DATABASE_URL=sqlite:///./chatbot.db
      
      # ChromaDB Configuration
      - CHROMA_PERSIST_DIRECTORY=./data/chroma_db
      
      # OpenAI Configuration (set in .env file)
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      
      # JWT Configuration (set in .env file)
      - SECRET_KEY=${SECRET_KEY}
      
      # Upload Configuration
      - MAX_UPLOAD_SIZE=50485760  # 50MB
      - UPLOAD_DIR=./uploads
      
      # Rate Limiting
      - RATE_LIMIT_REQUESTS=100
      - RATE_LIMIT_WINDOW=60
      
    volumes:
      # Persistent data storage
      - chatbot_data:/app/data
      - chatbot_uploads:/app/uploads
      - chatbot_logs:/app/logs
      
      # Database persistence
      - ./chatbot.db:/app/chatbot.db
      
    networks:
      - chatbot-network
    
    restart: unless-stopped
    
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    
    # Resource limits (adjust based on your needs)
    deploy:
      resources:
        limits:
          memory: 2G
          cpus: '1.0'
        reservations:
          memory: 512M
          cpus: '0.5'

  # Optional: Add nginx reverse proxy for production
  nginx:
    image: nginx:alpine
    container_name: rag-chatbot-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - ./ssl:/etc/nginx/ssl:ro  # SSL certificates (if available)
    depends_on:
      - chatbot-backend
    networks:
      - chatbot-network
    restart: unless-stopped
    profiles:
      - production  # Only start with: docker-compose --profile production up

volumes:
  chatbot_data:
    driver: local
  chatbot_uploads:
    driver: local
  chatbot_logs:
    driver: local

networks:
  chatbot-network:
    driver: bridge 